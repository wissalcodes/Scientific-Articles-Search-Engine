Orthographic Software Modeling (OSM) is based on three fundamental hypotheses — (a) that it is feasible to inte- grate the many diﬀerent kinds of artifacts used in contempo- rary software engineering methods within a single coherent methodology in which they are treated as views, (b) that it  Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee. VAO ’13, July 2, 2013, Montpellier, France Copyright 2013 ACM 978-1-4503-2041-2 ...$15.00.  is feasible to create an eﬃcient and scalable way of support- ing these views by generating them dynamically, on-the-ﬂy, from a Single Underlying Model (SUM) using model-based transformations and (c) that it is feasible to provide an in- tuitive metaphor for navigating around these many views by adapting the orthographic projection technique under- pinning the CAD tools used in other engineering disciplines.  Figure 1: Orthographic Projection.  As shown in Figure 1, the main advantages of using the idea of orthographic projection to deﬁne the views used to visualize and described a system are that they (a) can be organized according to a simple and easy-to-understand metaphor and (b) collectively represent all the properties of a system with minimal overlap and redundancy. In practice this translates into a set of “dimensions”, each containing well deﬁned choices (or so called “dimension elements”) that can be used to select individuals views.  As shown in Figure 2, the main advantage of making the artifacts used to describe a software system views of a SUM is that the number of pairwise coherence relationships that have to be maintained is reduced and new views can be in- troduced by simply deﬁning their relationship to the SUM. Moreover, the importance of this advantage grows quickly as the size of the system and the complexity of the deployed development methodology increase. Another important ad- vantage is that the dominance of one particular kind of view over the development process (e.g. code) at the expense of other kinds of views (e.g. graphical models) is reduced so that any appropriate type of views can be used to enrich the underlying description of the system, depending on the needs and skills of the stakeholder involved. This makes it possible to subsume all view types under the same, overarch-  Figure 2: Consistency Dependencies in Artifact-oriented versus View-oriented Environments.  ing development process and methodology (e.g. agile-driven, focusing on small development cycles, or model-driven de- velopment, based on transformations between abstraction levels). Although the details of how the views are created from the SUM and how the SUM is updated from the views are not central to the approach, a natural implementation is to use the visualization and transformation technologies oﬀered by model driven software engineering (MDSE).  To explore the validity of these hypotheses at the Uni- versity of Mannheim we have been developing a prototype OSM modeling environment based on an enhanced version of the KobrA method for model-driven, component-oriented development, KobrA 2.0 [1]. This was chosen as a basis for the prototype, known as the Open, Adaptable, Orthographic Modeling Environment (nAOMi) [13] because its views were designed with the precise goals of being (a) genuine pro- jections of a subject containing carefully selected subsets of information about that subject, (b) minimalistic in the sense that they should overlap to the smallest extent possible and contain the minimum necessary models elements, and (c) selectable via a set of independent “dimensions” which reﬂect diﬀerent fundamental concerns of development (i.e. abstraction levels, composition or variants). In other words, KobrA already provided one of the “most orthogonal” sets of views for visualizing software systems of any contempo- rary method. More details about the actual views and di- mensions deﬁned in KobrA are presented in the following sections. More information on OSM can be found in [2] and [3].  nAOMi is implemented as an Eclipse plugin using the Eclipse Modeling Framework (EMF) as the underlying mod- eling platform and UML 2.0 tools [4] to generate and edit views. The KobrA 2.0 metamodel on which the current version of nAOMi is based is a specialization of the UML metamodel composed of three separate packages — one for the SUM, one for the views and one for the transformations (Figure 3). The UML was chosen as the base language be- cause of its maturity and widespread acceptance, making the environment usable to the largest possible body of develop- ers. UML elements not needed in KobrA 2.0 are excluded using OCL constraints while new elements or properties are  Figure 3: KobrA 2.0 Top Level Packages.  introduced by specializing existing elements.  The unique contribution of this paper is to elaborate on the structure of the KobrA 2.0 metamodel and how it is used to drive nAOMi. The three following sections each focus on one of the three main components of the metamodel — the SUM, the views and the transformations . This is followed by a brief overview of the OSM navigation paradigm in Sec- tion 5 before a small example of the approach is presented in Section 6. Section 7 then concludes the paper with related and future work.  2. SUM PACKAGE  Figure 4 depicts the internal structure of the SUM pack- age which is based on the UML metamodel. There are three main subpackages, two containing the structural and behav- ioral constructs respectively, and one containing the con- straints that ensure that the metaclasses are used according to the KobrA conventions and rules.  The Classes subpackage of the Structure package contains some of the most fundamental elements of the KobrA meta- model, such as Class and ComponentClass. The internal structure of this package is illustrated in Figure 5. Com- ponentClass represents objects with complex and reusable behaviors, while Class captures simple “data type” objects that have only very simple or non-reusable behaviors. The modeler has to decide whether it is necessary to model a speciﬁc part of the system as a ComponentClass and include state charts and activity diagrams, or whether it is suﬃcient to use a Class (which is limited to using OCL constraints). ComponentClass inherits (indirectly via Class) from Com- munications so it also has the isActive attribute. This makes  SUMSUM / View Centric EnvironmentArtifact / Tools Centric EnvironmentKobrA2TransformationSUMViewsFigure 4: KobrA 2.0 SUM Package.  it possible to model whether its instances are active or pas- sive. Active objects, which can be used to model threads and processes ([8] p. 438), start to execute their behavior as soon as they are created and perform operations spontaneously. A ComponentClass may exhibit complex behavior. In Ko- brA, this behavior may be speciﬁed in the form of UML State Diagrams (deﬁning acceptable operation invocation sequences), and in the form of Activities (deﬁning algorithms of operations). UML Interaction elements (in sequence dia- grams) can be derived from the activity elements and thus are not included in the SUM. As KobrA aims to facilitate automatic checking of allowed sequences of operation calls, Protocol State Machines are supported instead of general state machines. Since the latter include a large variety of elements not needed for specifying acceptable operation se-  quences or automatic checking, OCL constraints are used to prohibit the use of unwanted features.  context ComponentClass -- only allow Activity elements or  P r o t o c o l S t a t e M a c h i n e s  inv : ownedBehavior - > forAll ( oclIsKindOf ( Actitivity ) or  oclIsKindOf ( P r o t o c o lS t a t e M ac h i n e ) )  For example, since KobrA has no concept of roles for com- ponents, the use of role also needs to be prohibited. The part association refers to owned properties of components whose attribute isComposite is true. As KobrA uses associations like nests and creates for components, part, required and provided are not needed. Connectors (i.e. delegation and assembly) are not used in KobrA either so ownedConnector is excluded.  KobrA2::SUM::Constraint::BehavioralKobrA2::SUM::Constraint::StructuralKobrA2::SUM::ConstraintKobrA2::SUM::Constraint::CommonKobrA2::SUM::Behavior::ProtocolStateMachinesKobrA2::SUM::Behavior::CommonKobrA2::SUM::Behavior::ActivitiesKobrA2::SUM::Behavior::ActionsKobrA2::SUM::BehaviorKobrA2::SUM::Structure::ClassesKobrA2::SUM::Structure::TypesKobrA2::SUM::Structure::InstancesKobrA2::SUM::Structure::ElementsKobrA2::SUM::StructureKobrA2::SUM::Constraint::OclExpressions<<merge>><<merge>><<merge>><<merge>><<merge>><<merge>><<merge>><<merge>><<merge>><<merge>><<merge>><<merge>>Figure 5: KobrA 2.0 Classes Package.  context ComponentClass inv : role - > union ( part ) -> union ( ownedConnector ) -> union ( co ll aborat i on Us e ) -> union ( representation ) -> union ( realization ) -> union ( required ) -> union ( provided ) -> isEmpty ()  3. VIEWS PACKAGE  The structure of the Views package is illustrated in Figure 6. Again, since most of the views deﬁned in KobrA 2.0 are based on UML diagrams, the view metamodels have similar elements to the SUM metamodel. The big diﬀerence to the SUM is that there are no restrictions on the use of the view metamodel elements. For instance, views for a particular purpose such as supporting model checkers can be supported by adding elements unrelated to the UML.  The substructure of the Views package reﬂects the types and organization of the KobrA views according to the view “dimensions” supported in nAOMi (cf. example in Section 6). At the top level, the Views package is thus decomposed into the Speciﬁcation and Realization options of the encap- sulation dimension. These, in turn are both decomposed into the Structural, Behavioral and Operational options of the Projection dimension. Finally, with the exception of the behavioral option, these are also all subdivided into the Service and Type options of the granularity dimension. This  dimension, with its two options, is an addition to the original version of KobrA.  The Service view shows the direct, publicly visible rela- tionships of the subject ComponentClass to other Compo- nentClasses, while the Type view shows the publicly visi- ble relationships of the subject to simple Classes. As with the SUM, constraints have been deﬁned to control what can go into each view and when they are well formed. For ev- ery view, a constraint enumerates all allowed elements (not shown in this paper).  In the following, some of the other constraints for the Service view are elaborated. Since this view is a black-box view, the internals of ComponentClasses (nestedClassiﬁer ) are not shown.  context ComponentClass -- no nested classifiers , no protocol inv : nestedClassifier - > union ( protocol ) -> isEmpty ()  Classes are only allowed if they are generalizations of Com- ponentClasses, (or any of its superclasses, since a Compo- nentClass may inherit from a class as shown in the con- straints with context Class. The following invariants ensure that only publicly visible attributes and operations are in this view, for both classes and ComponentClasses (which inherit from Class).  ClassKobrA2::SUM::Structure::ClassesGeneralizationSetAssociationClassComponentClassPropertyUsageAssociationOperationPackageableElementParameterAcquiresCreatesNestsUML::Component::PackagingComponents::ComponentUML::CommonBehaviors::Communications::Class+ownedOperation*+class0..1+supplier1..*{subsets supplierDependency}+supplierUsage*+client1..*{subsets clientDependency}+clientUsage*+ownedAttribute*+class0..1+powertype0..1+powertypeExtent*+packagedElement*{subsets component}+componentClass0..1+/superClassFigure 6: KobrA 2.0 Views package nesting.  context Class -- only allow classes that are direct or indirect  generaliza tion s of C o mp o nen tC la s se s in this view  def : c cG e ner al i za t ion : generalization . specific - >  exists ( oclIsKindOf ( ComponentClass ) )  inv :  generalization . specific - > select ( oclIsTypeOf (  Class ) ) -> exists ( s | s . cc Gene ra l iz ation )  or ccG e ner al i za t ion  -- only public attributes in this view inv : ownedAttribute - > forAll ( visibility =# public ) -- only public Operations are allowed in the  specification  inv : ownedOperation - > forAll ( visibility =# public )  Only operation signatures are shown in this view, so pre-, post- and bodyconditions, as well as activities are omitted,  which is reﬂected in the last constraint.  context Operation -- only the signature of the Operation is shown , not  its behavior ( role name " method " refers to the Activities of the operation ) , or dependencies inv : method - > union ( precondition ) -> union ( body ) -> union (  postcondition ) -> isEmpty ()  4. TRANSFORMATIONS PACKAGE  The package AllViews provides the foundation for speci- fying the transformations between the SUM and the views in both directions. Part of the package’s contents are shown in Figure 7. The Abstraction concept (which is in fact a  ClassServiceTypeInstanceServiceTypeStructuralSpecificationOperationalServiceTypeProtocolBehavioralKobrA2::Views::DerivedComponentClassDependenciesOperationDependenciesInstanceServiceTypeClassServiceTypeStructuralRealizationOperationalServiceTypeBehavioralAlgorithmViewsConcreteSyntaxSubject<<import>><<merge>><<merge>><<import>><<merge>><<import>>Figure 7: Transformation abstractions.  dependency reused from the UML but with additional con- straints) plays the key role in relating elements from the SUM to elements of a view. Abstraction is actually mapped to ExpressionInOcl. When appearing in transformations, the equals sign links elements in the SUM to the respective elements in the view, and vice versa. For instance, equal- ity of the general meta-association of a Generalization in a transformation invariant means that, when following gen- eral, there must be an element in the SUM and in the view for which similar transformation expressions are speciﬁed. In the case of KobrA 2.0, which has many projections that just select a subset of elements using one-to-one abstrac- tions, this allows concise declarative TransformationExpres- sions. Together with the view constraints, a CASE tool can be implemented which uses a transformation language of the implementor’s choice, for instance the Atlas Transformation Language (ATL) [11] or QVT [9]. The role names se and ve are short for SumElement and ViewElement, respectively. These roles subset the client and supplier roles from the UML.  SUM elements are translated into UML elements with stereotypes, so that the views are easy to manage for de- velopers familiar with the UML. The bidirectional mappings between stereotyped view elements and non-stereotyped SUM elements are expressed in the constraints of the Association- Abstraction, a subclass of the Abstraction from the AllViews package. This is also an example of a transformation which is reused in other views.  context A s s o c i a t i o n A b s t r a c t i o n inv : ve . memberEnd = se . memberEnd inv : ve . ownedEnd = se . ownedEnd ivn : ve . n av i gable O w n e d E n d = se . n av i g a bl e O w ne d E n d inv : se . oclIsKindOf ( Acquires ) implies ve .  hasStereotype ( ’ acquires ’)  inv : ve . hasStereotype ( ’ acquires ’) implies se .  oclIsKindOf ( Aquires )  inv : se . oclIsKindOf ( Nests ) implies ve . hasStereotype ( ’  nests ’)  inv : ve . hasStereotype ( ’ nests ’) implies se . oclIsKindOf  ( Nests )  inv : se . oclIsKindOf ( Creates ) implies ve . hasStereotype  ( ’ creates ’)  inv : ve . hasStereotype ( ’ creates ’) implies se .  oclIsKindOf ( Creates )  Figure 8 shows the main elements involved in the trans- formation of the black box structural view for Component- Classes. The ﬁrst transformation constraint is on the view It and declares the starting point for the transformation. states that the subject ComponentClass and its generaliza- tions (using a SUM utility function, superClosure) are in the view.  The following transformation rules illustrate how to create the output (i.e. view) elements from the input (i.e. SUM) el- ements, such as the publicly visible attributes and operations of the ComponentClass and the acquired ComponentClasses. The ﬁrst constraint for ComponentClassAbstraction states that references to potential general classes (and Component- Classes) of ComponentClasses are mirrored in the view. In addition, ComponentClasses will be shown with the corre- sponding stereotypes. The ComponentClass owns various types of associations, so in this view only the acquires asso- ciations are selected (whose transformation rules are cov- ered in the common transformation packages).For classes and ComponentClasses, only publicly visible attributes and operations appear in the view. Class invariants are also copied. Classes that may appear in this view (e.g. as gener- alizations of ComponentClasses) may have a powertype (role name powertypeExtent) which will be displayed.  The last transformation statement copies the class refer- ences of operations. As with all views, the transformation rules, the common transformation statements (which also cover operations) and the view constraints serve as a speci- ﬁcation for the implementation of a view. Individual CASE tools can use diﬀerent implementation techniques as long as they conform to the semantics of these rules and constraints.  KobrA2::Transformation::Common::AllViewsAbstractionTransformationExpressionViewElementSumElementViewKobrA2::SUM::Structure::Elements::ElementKobrA2::Views::ConcreteSyntax::ElementKobrA2::SUM::Constraint::Behavioral::ExpressionInOclKobrA2::Views::Subject::View{subsets mapping}0..10..1{subsets clientDependency}+abstraction1{subsets client}+ve11..*1{subsets supplier}+se1{subsets supplierDependency}+abstraction1..*Figure 8: Transformation to the Speciﬁcation Structural Service View.  context KobrA2 :: Views :: Subject ::  S p e c i f i c a t i o n S t r u c t u r a l C l a s s S e r v i c e  inv : ownedMember - > select ( oclIsKindOf ( Class ) ) =  subject . superClosure - > union ( subject . acquires . superClosure )  context C o m p o n e n t C l a s s A b s t r a c t i o n inv : ve . superClass = se . superClass inv : ve . hasStereotype ( ’ ComponentClass ’) inv : se . isSubject implies ( ve . hasStereotype ( ’ subject ’) and ve . ownedMember - > select ( oclIsKindOf ( Association ) ) = se . ownedMember - > select ( oclIsKindOf ( Acquires ) ) )  context Cl assA bs t ra c tio n inv : ve . ownedAttribute = se . ownedAttribute - > select (  visibility =# public )  inv : ve . ownedOperation = se . ownedOperation - > select (  visibility =# public ) inv : ve . ‘ inv ’ = se . ‘ inv ’ -- copy p owe rtyp eExt ent that is only allowed for  class  inv : ve . powertyp eExt ent = se . po wert ype Exte nt  context O p er a t i o n A b s t r a ct i o n inv : ve . class = se . class  For the black box type view, only publicly visible at- tributes and operations of classes (as opposed to Compo- nentClasses) used by the subject can be seen. This is spec- iﬁed in the ﬁrst rule which deﬁnes owned members of the view and thus serves as the starting point of the transfor- mation. cbbTypes is a utility function deﬁned in the SUM which computes the black box types by selecting the types of the subject’s public attributes and parameter types of its public operations.  Class invariants and potential powertypes and connections to the classes in this view are shown as well. There may also be Enumerations, for which the EnumerationLiterals are displayed.  The transformation rules for this view are almost the same as the realization transformation constraints from the pack- age Transformation::Realization::Structural::Class::Type. The diﬀerences are the select(visibility=#public) statements for operations and attributes.  context KobrA2 :: Views :: Subject ::  S p e c i f i c a t i o n S t r u c t u r a l C l a s s T y p e  inv : ownedMember - > select ( oclIsKindOf ( Class ) or oclIsKindOf ( ‘ Enumeration ’) or oclIsKindOf ( Association ) ) = subject - > union ( subject . cbbTypes )  context C o m p o n e n t C l a s s A b s t r a c t i o n inv : se . isSubject implies ve . hasStereotype ( ’ subject ’)  context Cl assA bs tra c tion inv : not se . oclIsKindOf ( ComponentClass ) implies (  ve . ownedAttribute = se . ownedAttribute - > select (  visibility =# public )  ve . ownedOperation = se . ownedOperation - > select (  visibility =# public ) )  inv : ve . powertyp eExt ent = se . po wer type Exte nt inv : ve . superClass = se . superClass inv : ‘ ve . inv ’ = ‘ se . inv ’  context C o m p o n e n t C l a s s A b s t r a c t i o n inv : se . isSubject implies ve . hasStereotype ( ’ subject ’)  context E n u m e r a t i o n A b s t r a c t i o n inv : ve . ownedLiteral = se . ownedLiteral  context E n u m e r a t i o n L i t e r a l A b s t r a c t i o n inv : ve . specification = se . specification .  stringInSignature  5. NAVIGATION  Most of today’s tools use some combination of trees to organize the content of models as well as the views used to visualize a software system or component. In an any envi- ronment incorporating a number of diﬀerent tools there is invariably a large number of diﬀerent trees storing a het- erogeneous mix of artifacts including model elements (e.g. classes, instances, associations), diagrams (e.g. class dia- grams, state diagrams) and other artifact types (source code, XML ﬁles, conﬁguration ﬁles ). To work with all the views in a traditional development environment, therefore, engineers typically have to learn about the organization structures of all the incorporated tools.  In contrast to conventional paradigms for organizing and navigating the many views used to visualize a system, OSM employs the metaphor of a multi-dimensional cube. More speciﬁcally, as illustrated in Figure 9, OSM regards dimen- sion of the underlying methodology as representing a diﬀer- ent dimension of the cube, and each independently variable aspect of that dimension is a selectable dimension element. Selecting a view thus simply corresponds to selecting a single cell within the cube. In general, three types of dimensions are supported: static dimensions in which the number of  KobrA2::Transformation::Specification::Structural::Class::ServiceComponentClassAbstractionKobrA2::Transformation::Common::Feature::OperationAbstractionKobrA2::Transformation::Common::AllViews::AbstractionKobrA2::SUM::Structure::Classes::ComponentClassKobrA2::SUM::Structure::Classes::OperationKobrA2::SUM::Structure::Classes::ClassOperationAbstractionClassAbstraction+se11..*+se11..*+se11..*Figure 9: Dimension-based navigation.  selectable elements (i.e. coordinates) is ﬁxed, dynamic di- mensions in which the number of elements is dynamic (i.e. derived from the SUM), and mixed dimensions which have both static and dynamic elements.  To support the OSM dimension based navigation metaphor for KobrA, we deﬁned the seven dimensions indicated on the left hand side of Figure 10 which is a sceenshot of nAOMI. The Abstraction dimension (not expanded here), which has three static dimension elements, PIM (platform independent model), PSM (platform speciﬁc model) and Code, captures the model-driven development concern of KobrA. The ver- sion dimension captures the state of the modeled system at speciﬁc points in time. The Component dimension, which has dynamic dimension elements deﬁned by instances of the class ComponentClass in the SUM, captures the component- based development concern of KobrA.  The Encapsulation dimension, which has two ﬁxed ele- ments, supports the distinction between Speciﬁcation (black box) and Realization (white box) views of components, while the Projection dimension with the ﬁxed elements Structural, Operational and Behavioral covers the diﬀerent information types. The Granularity dimension provides a ﬁner grained distinction between views describing the types used by com- ponents (Type granularity) and views describing the required and provided interfaces (Service granularity). The Opera- tion dimension allows a selection of individual operations.  In the ideal case, when all views are truly orthogonal, the choices that can be made in each dimensions are completely independent. However, this is very diﬃcult to achieve in software engineering. The approach still works if the views are not completely orthogonal, but dependencies then occur between diﬀerent choices in diﬀerent dimensions, so that the decisions made in one dimensions may aﬀect choices possi- ble in another dimension. This is best handled by giving dimensions a precedence ranking determined by the order in which they appear (the top being the highest). When an element in a dimension is selected, the tool automatically makes default selections for dimensions of lower precedence (i.e. dimensions lower down) and disables selections that would navigate to cells (i.e. views) which are not (yet) de- ﬁned by the method at hand.  6. SHOPPING CART EXAMPLE  To show how a software system can be speciﬁed using nAOMi, this section presents a case study based on a shop- ping cart system. A ShoppingCart component collects and  Figure 10: Speciﬁcation Structural View.  manages the products selected by users and supports pay- ment via a credit card. Figure 10 illustrates a structural view of the component.  In the dimension navigator on the left hand side, PIM was chosen for the “Abstraction Level” (not expanded in the screenshot). The second dimension is the state of the soft- ware system at a certain point in time. The picture shows that the latest available version was chosen. As with every choice in a dimension, it may inﬂuence the options in lower ranked dimensions. The component under consideration is the ShoppingCart, for which a black box view is selected in the next dimension. After the user selects the structural projection option and the service level granularity, the tool automatically chooses the option for all operations in the last dimension, as there is no editor registered for the other options.  The component under development is presented with the stereotype subject and its relationship to other components and classes is shown in the view, which corresponds to a cell of the multi-dimensional navigation cube, and is generated on-the-ﬂy from the SUM when it is selected. The classes Product and CreditCard can be used as data types in the operations of the component.  Figure 11 illustrates the operational view in which an operation can be formalized using pre- and postconditions. The precondition corresponds to the assumes clause in and the postcondition corresponds to the result clause. As in the UML, the precondition of an operation must be true when the operation is invoked and the postcondition must be true when the operation is ﬁnished. The operation addProduct in Figure 11 must be in state CollectingProducts or Empty when invoked. This is also visible in the behavioral view,  Figure 11: addProduct() Operation Speciﬁcation.  since there are only two transitions with the operation ad- dProduct. Both leads to the state CollectingProducts which is also a postcondition of the operation. The second post- condition is that the cost attribute of the component must be increased by the price of the added product. The pre- and postcondition can be expressed using the OCL. The proper- ties of the component, states and operation parameters can be used to formalise the constraints like as in this example. Figure 12 shows the publicly visible behaviour of the Shop- pingCart component with states and transitions. The condi- tional transitions map to operations of the component. Like every view, this view is also synchronized with the SUM so that it is guaranteed that its operations, states and proper- ties are consistent with those in the structural view.  Figure 12: Speciﬁcation Behavioral Model.  Although the operational view seems to be similar to the behavioral view because of the overlapping information within  them, there are signiﬁcant diﬀerences. The focus of the op- erational view is on a precise formal deﬁnition of an opera- tion of a component. The operations can be enriched by pre- and postconditions which can be deﬁned using complex OCL statements, that formalize the complete behavior of an op- eration. The additional information in the OCL statements can be used for code generation and documentation.  7. CONCLUSION  At the beginning of the paper we identiﬁed three funda- mental hypothesis upon which the notion of OSM is based — (a) that it is feasible to integrate the many diﬀerent kinds of artifacts used in contemporary software engineering meth- ods within a single coherent methodology in which they are treated as views, (b) that it is feasible to create an eﬃ- cient and scalable way of supporting these views by gener- ating them dynamically, on-the-ﬂy, from a Single Underly- ing Model (SUM) using model-based transformations and (c) that it is feasible to provide an intuitive metaphor for navigating around these many views by adapting the ortho- graphic projection technique underpinning the CAD tools used in other engineering disciplines.  The prototype tool, nAOMi, described in this paper rep- resents the ﬁrst step towards demonstrating the validity of these hypotheses and showing that OSM is a viable approach to software engineering. Of the three hypotheses, (a) and (c) are most convincingly demonstrated by the prototype, since it shows that it is indeed possible to support all the views of the KobrA method within a single navigation metaphor. The prototype tool does not demonstrate the validity of hy- pothesis (b) to the same extent as the others due to its small size. Although it demonstrates the feasibility of gen- erating views from the SUM and vice-versa, the question of whether such an approach scales up to large environments is still open.  Although nOAMi is the only tool developed with the spe- ciﬁc aim of supporting KobrA-based OSM, several other tools and methods have similar properties or aims. For example, Glinz et al. [10] describe a tool with a ﬁsheye zooming algorithm which lets the user view a model with varying amounts of detail depending on the context. It has to be investigated whether it is possible to combine the ﬁsh- eye zooming concept with the dimension-based navigation paradigm. While the KobrA 2.0 implementation of nAOMi heavily uses UML diagrams for developers, Glinz et al. use  custom diagram types, e.g. views.  for structural and behavioral  An approach which also emphasizes the description of for- mal consistency rules (correspondences) between views is RM-ODP [5][6]. However, this approach does not explic- itly mention the notion of a SUM and thus implies that consistency rules should be deﬁned in a pairwise fashion be- tween individual pairs of views. ArchiMate [7], which com- plements TOGAF [12], is an enterprise architecture mod- eling language which oﬀers two orthogonal ”dimensions” for modeling, (business, architecture, and technology) layers and (informational, behavioral and structural ) aspects and also suggests two more dimensions, purpose and abstraction level. However, as many of these views span multiple choices of a single “dimension”, the intuitive dimension-based navigation metaphor of OSM can not be easily applied. There are also more general approaches for view-based modeling but they are less speciﬁc in terms of consistency rules between views and provide little guidance on how to manage and navigate views, for example the Zachman Framework [14].  Regarding the practical use of OSM environments in the future, the biggest challenge is developing appropriate SUM metamodels which can accommodate all the types of views and services that software engineers are accustomed to to- day. For this ﬁrst prototypical SUM-based environment sup- porting the OSM approach we had a method at our disposal (KobrA) that already deﬁned a full set of orthogonal UML- based views. This allowed us to model the required SUM and view metamodels by simply adapting the UML meta- models, removing and adding model elements as needed.  In doing so we were able to manually ensure that the meta- models fulﬁlled the two core requirements of SUM-based en- vironments — (1) being minimalistic and (2) redundancy free. If SUM-based software engineering environments are to take oﬀ, and to be introduced into existing, heteroge- neous environments, more sophisticated ways of integrating existing metamodels into a single uniﬁed metamodel will be required.  8. REFERENCES [1] C. Atkinson, J. Bayer, C. Bunse, E. Kamsties,  O. Laitenberger, R. Laqua, D. Muthig, B. Paech, J. W¨ust, and J. Zettel. Component-Based Product Line Engineering with UML. Addison Wesley, Reading, Massachusetts, USA, 1st edition, November 2001. [2] C. Atkinson, D. Stoll, and P. Bostan. Orthographic  Software Modeling: A Practical Approach to View-Based Development. In Evaluation of Novel Approaches to Software Engineering, volume 69 of  Communications in Computer and Information Science, pages 206–219. Springer Berlin Heidelberg, 2010.  [3] C. Atkinson, D. Stoll, and C. Tunjic. Orthographic  Service Modeling. In Proceedings of 15th IEEE EDOC Conference Workshops (EDOCW), Helsinki, Finland, 2011.  [4] Eclipse Foundation. UML2Tools.  http://wiki.eclipse.org/MDT-UML2Tools, 2013. [5] ISO/IEC and ITU-T. The Reference Model of Open Distributed Processing. RM-ODP, ITU-T Rec. X.901-X.904 / ISO/IEC 10746. http://standards.iso.org/ ittf/PubliclyAvailableStandards/index.html, 1998.  [6] J. I. J. Jose Raul Romero and A. Vallecillo. Realizing Correspondences in MultiViewpoint Speciﬁcations. In Proceedings of the Thirteenth IEEE International EDOC Conference, 1 - 4 September 2009, Auckland, New Zealand, September 2009.  [7] M. Lankhorst. Enterprise Architecture at Work.  Springer Berlin Heidelberg, 2009.  [8] Object Management Group (OMG). OMG Uniﬁed Modeling Language (OMG UML), Superstructure, V2.1.2. http://www.omg.org/cgi-bin/doc?formal/07-11-02, November 2007.  [9] Object Management Group (OMG). Meta Object  Facility (MOF) 2.0 Query/View/Transformation, v1.0. http://www.omg.org/spec/QVT/1.0/PDF/, April 2008.  [10] C. Seybold, M. Glinz, S. Meier, and N. Merlo-Schett.  An eﬀective layout adaptation technique for a graphical modeling tool. In Proceedings of the 2003 International Conference on Software Engineering, Portland, 2003.  [11] The Atlas Transformation Language (ATL). Oﬃcial Website. http://www.eclipse.org/atl/, 2013.  [12] The Open Group. TOGAF Version 9 - The Open  Group Architecture Framework. http://www.opengroup.org/architecture/ togaf9-doc/arch/index.html, Feb 2009. [13] University of Mannheim - Software Engineering  Group. nAOMi - opeN, Adaptable, Orthographic Modeling EnvIronment. http://eclipselabs.org/p/naomi.  [14] J. A. Zachman. The Zachman Framework: A Primer for Enterprise Engineering and Manufacturing. http://www.zachmaninternational.com, 2009.